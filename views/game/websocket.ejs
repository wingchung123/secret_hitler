<script src="/javascripts/ejs.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<!-- <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script> -->
<script type="text/javascript">

  const MAX_COOKIE_AGE = 4 * 60 * 60 //in seconds
  const LOCAL_DEV = false
  var WS_IP_ADDRESS = 'http://<%=ip_address%>' // add port 3000 for local



  function setTimeForCookies (minutes) {
    var now = new Date();
    var time = now.getTime();
   
    time += minutes * 60 * 1000;
    now.setTime(time);
    return now;
  }

  function getCookieValue(name) {
    let result = document.cookie.match("(^|[^;]+)\\s*" + name + "\\s*=\\s*([^;]+)")
    return result ? result.pop() : ""
  }

  function setCookieValue(key,value,path='/'){
    cookieString = key + "=" + value + "; max-age=" + MAX_COOKIE_AGE + '; path=' + path
    document.cookie = cookieString.trim()
  }

  function deleteCookieValue(key,path='/'){
    cookieString = key + "=" + "" + "; expires=Thu, 18 Dec 2013 12:00:00 UTC" + '; path=' + path
    document.cookie = cookieString.trim()
  }

  function amIPresident(){
    let thisPlayerID = getCookieValue('playerID')
    let presidentID = getCookieValue('presidentID')
    return thisPlayerID == presidentID
  }

  function amIAlive(){
    let thisPlayerID = getCookieValue('playerID')
    let ghostCookie = getCookieValue('ghost' + thisPlayerID)
    return ghostCookie == ''
  }

  // excludes this player
  function generatePlayersList(){
    let numberOfPlayers = getCookieValue('numberOfPlayers')
    let playerID = getCookieValue('playerID')
    let returnValue = []
    for (var i = 1; i <= numberOfPlayers; i++){
      if (playerID != i){
        let playerName = getCookieValue(i)
        let ghostName = getCookieValue('ghost'+i)
        if (playerName != "" && ghostName == ""){
          let player = {
            "playerName" : getCookieValue(i),
            "playerID" : i
          }
          returnValue.push(player)
        }
      }
    }

    return returnValue
  }

  function generateExecutedPlayersList(){
    let numberOfPlayers = getCookieValue('numberOfPlayers')
    let playerID = getCookieValue('playerID')
    let returnValue = []
    for (var i = 1; i <= numberOfPlayers; i++){
      if (playerID != i){
        let playerName = getCookieValue('ghost'+i)
        if (playerName != ""){
          let player = {
            "playerName" : getCookieValue('ghost'+i),
            "playerID" : i
          }
          returnValue.push(player)
        }
      }
    }

    return returnValue
  }

  function generatePlayersOptions(listOfPlayers){
    let returnHTML = "<option value=\"\"></option>"
    listOfPlayers.forEach(function(item, index) {
      returnHTML += "<option value=" + item.playerID + ">" + item.playerName + "</option>"
    })
    return returnHTML
  }

  function showCurrentOffice(){
    let presidentID = getCookieValue('presidentID')
    let chancellorID = getCookieValue('chancellorID')

    // display office elects
    $('.presidentElect').addClass('d-none') // hide all
    $('.chancellorElect').addClass('d-none')
    let selectedPresidentSelector = '#presidentElect_' + presidentID
    let selectedChancellorSelector = '#chancellorElect_' + chancellorID
    $(selectedPresidentSelector).removeClass('d-none')
    $(selectedChancellorSelector).removeClass('d-none')
  }

  function showPreviousOffice(){
    let previousPresidentID = getCookieValue('previousPresidentID')
    let previousChancellorID = getCookieValue('previousChancellorID')

    // identify who the past president & chancellor are
    // first hide all then show
    $('.previousPresident').addClass('d-none')
    $('.previousChancellor').addClass('d-none')

    let previousPresidentSelector = '#previousPresident_' + previousPresidentID
    let previousChancellorSelector = '#previousChancellor_' + previousChancellorID

    $(previousPresidentSelector).removeClass('d-none')
    $(previousChancellorSelector).removeClass('d-none')

  }

  function disableVoting(){
    $('#voteYes').prop('disabled', true)
    $('#voteNo').prop('disabled', true)

  }

  function updateGameBoards(){
    let electionTracker = getCookieValue('electionTracker')
    let numberOfFacistPoliciesEnacted = getCookieValue('numberOfFacistPoliciesEnacted')
    let numberOfLiberalPoliciesEnacted = getCookieValue('numberOfLiberalPoliciesEnacted')



    let electionTrackerSelector = "#election_tracker_" + electionTracker
    let facistBoardSelector = "#facist_board_" + numberOfFacistPoliciesEnacted
    let liberalBoardSelector = "#liberal_board_" + numberOfLiberalPoliciesEnacted
    
    $('.board').addClass('d-none')
    $(electionTrackerSelector).removeClass('d-none')
    $(facistBoardSelector).removeClass('d-none')
    $(liberalBoardSelector).removeClass('d-none')
  }

  function standardLoad(){
    showCurrentOffice()
    showPreviousOffice()
    disableVoting()
    updateGameBoards()

    // Hide Chancellor Selection, deselect & disable voting
    $('#chancellorSelectionAccordion').addClass('d-none')
    $("#selectChancellor option:selected").prop("selected", false)
    // Clear out policies HTML & hide accordion
    $("#policies").html('<div></div>')
    $("#policiesRadio").html('<div></div>')
    $('#policyAccordion').addClass('d-none')
    $('#vetoPower').addClass('d-none')
    $('#vetoPower').prop('disabled', true)

    $('#investigateOrExecutionSubmit').addClass('d-none')
    $('#specialElectionSubmit').addClass('d-none')

  }

  function getFacistIDs(){
    let facistIDs = getCookieValue('fpids')
    console.log(facistIDs)
    return facistIDs.substring(0,facistIDs.length-1).split('F') //there's an extra semi-colon at the end
  }

  //to enable/disable backdrop & close button of modal
  function disableModalBackdrop(boolean) {
    if (boolean){
      // disable background click dismissal
      $('#executiveActionModal').modal({backdrop: 'static', keyboard: false, show: false})
      $('#executiveActionResultModal').modal({backdrop: 'static', keyboard: false, show: false})


      // disable close button dismissal
      $('#executiveActionResultModalClose').prop("disabled",true)
      $('#executiveActionModalClose').prop("disabled",true)

      // $('#executiveActionModal').modal('hide')
      // $('#executiveActionResultModal').modal('hide')


    } else {
      try {
        $('#executiveActionModal').data('bs.modal')._config.backdrop = true;
      } catch (e) {
        console.log("tried to enable backdrop")
      }
      try {
        $('#executiveActionResultModal').data('bs.modal')._config.backdrop = true;
      } catch (e) {
        console.log("tried to enable backdrop")
      }

      $('#executiveActionResultModalClose').prop("disabled",false)
      $('#executiveActionModalClose').prop("disabled",false)

    }
  }

  function executiveActionResultPolicy(executiveActionResult){
    // change the img src to reflect next 3 policies
    executiveActionResult = executiveActionResult.replace(/\[/g, '')
    executiveActionResult = executiveActionResult.replace(/\'/g, '')
    executiveActionResult = executiveActionResult.replace(/\\/g, '')
    executiveActionResult = executiveActionResult.replace(/\]/g, '')
    console.log(executiveActionResult)
    executiveActionResult = executiveActionResult.split(',')

    for (let i = 0; i < executiveActionResult.length; i++) {
      let nextPolicy = executiveActionResult[i]
      console.log("this is inside for loop, nextPolicy: " + nextPolicy)
      let policyPeekSelector = '#policyPeek' + (i + 1)
      console.log("this is inside for loop, policyPeekSelector: " + policyPeekSelector)
      let policyPeekImageSRC = ""
      if (nextPolicy.trim() == 'L') {
        policyPeekImageSRC = '/images/liberal_policy_rounded.png'
      } else if (nextPolicy.trim() == 'F') {
        policyPeekImageSRC = '/images/facist_policy_rounded.png'
      }
      $(policyPeekSelector).attr('src',policyPeekImageSRC)
    }
    $('#executiveActionResultModal').modal('show')
    $('#executiveActionModalBodyPolicyPeek').removeClass('d-none')
    $('#executiveActionModalBodyInvestigateLoyalty').addClass('d-none')
    $('#executiveActionModalBodyExecution').addClass('d-none')
    $('#executiveActionResultSubmit').removeClass('d-none')
  }

  function executiveActionResultInvestigate(executiveActionResult){
    let membershipSRC = ""
    if(executiveActionResult == 'Liberal') {
      membershipSRC = "/images/party_membership_liberal.png"
    } else if (executiveActionResult == 'Facist'){
      membershipSRC = "/images/party_membership_facist.png"
    }

    $('#investigateMembershipResult').attr('src', membershipSRC)
    $('#investigatedPlayer').html(function(index,currentcontent) {
        return "<i>" + $( "#selectPlayer option:selected" ).text() + "</i>"
    })

    $("#selectPlayer option:selected").prop("selected", false)
    $('#investigateOrExecutionSubmit').addClass('d-none')
    
    $('#executiveActionResultModal').modal('show')
    $('#executiveActionModalBodyInvestigateLoyalty').removeClass('d-none')
    $('#executiveActionModalBodyPolicyPeek').addClass('d-none')
    $('#executiveActionModalBodyExecution').addClass('d-none')
    $('#executiveActionResultSubmit').removeClass('d-none')
  }

  //input {executive_action: string, game_id: string}
  function executiveAction(executiveActionData) {
    if (executiveActionData.executive_action == 'special_election') {

    } else {
      fetch('executive_action',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(executiveActionData)

      }).then(res => {return res.text()} )
        .then(jsonRes => {
          // console.log(jsonRes)
          // console.log(JSON.parse(jsonRes).executiveActionResult)
          let executiveActionResult = JSON.parse(jsonRes).executiveActionResult
          // console.log("this is inside the response")
          console.log(executiveActionResult)

          if (executiveActionData.executive_action == "policy_peek"){

            executiveActionResultPolicy(executiveActionResult)

          } else if (executiveActionData.executive_action == "investigate_loyalty"){
            executiveActionResultInvestigate(executiveActionResult)

          } else if (executiveActionData.executive_action == "execution"){
            // if it's execution, it would either call next turn or end game
            // thus minimize result

            $('#executedPlayer').html(function(index,currentcontent) {
                return  "<i>" + $( "#selectPlayer option:selected" ).text() + "</i> has been killed.</br>" + "<i>" + $( "#selectPlayer option:selected" ).text() + "</i> is " + executiveActionResult
            })
            $('#executiveActionResultModal').modal('show')
            $('#executiveActionModalBodyExecution').removeClass('d-none')
            $('#executiveActionModalBodyInvestigateLoyalty').addClass('d-none')
            $('#executiveActionModalBodyPolicyPeek').addClass('d-none')
            $('#executiveActionResultSubmit').removeClass('d-none')


            $("#selectPlayer option:selected").prop("selected", false)
            $('#investigateOrExecutionSubmit').addClass('d-none')
          }

          setCookieValue('executiveAction', 'Null')
        })
    }
  }

  function reloadGameState(){
    let presidentID = getCookieValue('presidentID')
    let chancellorID = getCookieValue('chancellorID')
    let previousPresidentID = getCookieValue('previousPresidentID')
    let previousChancellorID = getCookieValue('previousChancellorID')
    let electionTracker = getCookieValue('electionTracker')
    // let numberOfLiberalPoliciesEnacted = getCookieValue('numberOfLiberalPoliciesEnacted')
    // let numberOfFacistPoliciesEnacted = getCookieValue('numberOfFacistPoliciesEnacted')
    let thisPlayerID = getCookieValue('playerID')
    let policiesInHand = getCookieValue('policiesInHand')
    let locked_in = getCookieValue('locked_in')
    let executiveAction = getCookieValue('executiveAction') // chancellor ID is locked in, enable voting
    let executiveActionResult = getCookieValue('executiveActionResult')

    console.log("page reloaded...")
    standardLoad()

    if (executiveAction != 'Null') {
    console.log('there is an executive action')
      executive_action_event()

    } else if (executiveActionResult != 'Null' && typeof executiveActionResult != 'undefined') {
    console.log(executiveActionResult)
    console.log(executiveActionResult != 'Undefined')
      if (amIPresident()) {
        executiveActionResult = decodeURIComponent(executiveActionResult)
        console.log("this is ea result: " + executiveActionResult)
        if (executiveActionResult[0] == '[') {
          executiveActionResultPolicy(executiveActionResult)
        } else {
          executiveActionResultInvestigate(executiveActionResult)
        }
      }


    } else if (chancellorID == 'Null'){
      console.log('time to select a chancellor...')
      next_turn_event()
    } else if (policiesInHand != 'Null') {
      // president discard/policy enactment
      console.log(policiesInHand)
      console.log(policiesInHand != 'Null')

      if (policiesInHand.toString() == '3' || policiesInHand.split('p').length == 3){
        console.log('president discard')
        president_discard_event()
      } else {
        //policy enactment
        console.log('policy enactment')
        chancellor_discard_event()

      }
      
    } else {
      // voting time
      console.log('voting time')
      chancellor_locked_in()
    }

    // if (executiveAction != 'Null'){

    //   $('#executiveActionModalBodyTitle').html(function(index,currentcontent){
    //     let leadingMessage = currentcontent.split(':')[0]
    //     return leadingMessage + ': <strong>' + executiveAction.replace('_', ' ') + "</strong>"
    //   })

    //   if (amIPresident()){
    //     disableModalBackdrop(true)

    //     if (executiveAction == "policy_peek"){
    //       $('#executiveActionModalSNSBody').addClass('d-none')
    //       $('#investigateOrExecutionSubmit').addClass('d-none')
    //       $('#executiveActionSubmit').removeClass('d-none')
    //       $('#investigateOrExecutionSubmit').prop("disabled",true)
    //     } else {
    //       let listOfPlayers = generatePlayersList()
    //       $('#selectPlayer').html(function(index,currentcontent){
    //         return generatePlayersOptions(listOfPlayers)
    //       });

    //       $('#executiveActionSubmit').addClass('d-none')
    //       $('#executiveActionModalSNSBody').removeClass('d-none')
    //       $('#investigateOrExecutionSubmit').addClass('d-none')
    //       $('#specialElectionSubmit').addClass('d-none')

    //       if (executiveAction == "special_election"){
    //         $('#specialElectionSubmit').prop("disabled",false)
    //       } else {
    //         // investigate or execute
    //         $('#investigateOrExecutionSubmit').prop("disabled",false)
    //         if (executiveAction == "investigate_loyalty"){
    //           $('#investigateOrExecutionSubmit').html('Investigate')
    //         } else if (executiveAction == "execution") {
    //           $('#investigateOrExecutionSubmit').html('Execute')
    //         }
    //       }
    //     }
    //   } else {
    //     disableModalBackdrop(false)
    //     $('#executiveActionSubmit').removeClass('d-none')
    //     $('#executiveActionModalSNSBody').addClass('d-none')
    //     $('#investigateOrExecutionSubmit').prop("disabled",true)
    //     $('#investigateOrExecutionSubmit').addClass('d-none')
    //   }

    //   $('#executiveActionModal').modal('show')


    // } else if (policiesInHand != 'Null' ) {
    //     console.log("vote has passed... waiting on policy discard/enactment")
    //     // $('#voteYes').prop("disabled",true)
    //     // $('#voteNo').prop("disabled",true)
    //     $('#vetoPower').addClass('d-none')
    //     $('#vetoPower').prop('disabled', true)

    //     $('#policyAccordion').addClass('d-none')
    //     if (policiesInHand == 3 && amIPresident() ){
    //       $('#policiesModal').modal('show')
    //       $('#policyAccordion').removeClass('d-none')

    //       policyRadioListeners();
    //     } else if (policiesInHand == 2 && thisPlayerID == chancellorID){
    //       console.log(getCookieValue('vetoPower') == 'true')
    //       // if not the president, delete the html policies
    //       $('#policiesModal').modal('show')
    //       $('#policyAccordion').removeClass('d-none')

    //       if (getCookieValue('vetoPower') == 'true') {
    //         $('#vetoPower').removeClass('d-none')
    //         $('#vetoPower').prop('disabled', false)
    //       }
          

    //       policyRadioListeners();
    //     } else {
    //       $("#policies").html('<div></div>')
    //       $("#policiesRadio").html('<div></div>')
    //     }

    // } else if ( locked_in == 'true') {
    //   console.log("chancellor has been locked in... voting time")
    //   // deleteCookieValue('locked_in')
    //   // chancellor is locked in, enable voting buttons
    //   // make sure chancellorID is not null
    //     // $('#voteYes').prop("disabled",false)
    //     // $('#voteNo').prop("disabled",false)

    // } else {
    //   // default state; similar to after next_turn SNS
    //   // time to select a chancellor and lock it in
    //   console.log("chancellor section time")
    //   // $('#voteYes').prop("disabled",true)
    //   // $('#voteNo').prop("disabled",true)
    //   if (amIPresident() ){

    //     $('#presidentModal').modal('show')
    //     $('#chancellorSelectionAccordion').removeClass('d-none')
    //   }




    // }


    // //identify current president and display badge
    // let selectedPresidentSelector = '#presidentElect_' + presidentID
    // $(selectedPresidentSelector).removeClass('d-none')
    // let selectedChancellorSelector = '#chancellorElect_' + chancellorID
    // $(selectedChancellorSelector).removeClass('d-none')

    // // identify who the past president & chancellor are
    // let previousPresidentSelector = '#previousPresident_' + previousPresidentID
    // let previousChancellorSelector = '#previousChancellor_' + previousChancellorID

    // $(previousPresidentSelector).removeClass('d-none')
    // $(previousChancellorSelector).removeClass('d-none')

  }

  /* Structure of messages
   *  message.origin = sns || peer
   *  message.subject = switch case
   *  message.message = json data **** MUST INCLUDE GAME ID ****
   *
   **/
  function sendWSMessage(message){


    console.log("websocket IP: " + WS_IP_ADDRESS)
    const socket = io(WS_IP_ADDRESS);


    socket.on('connect', function(){
      console.log('single message socket successfully connected')
      socket.send(message)
      socket.close()
    });

    socket.on('disconnect', function(){
      console.log('closing single message socket')
    })

  }

  function next_turn_event(){
    let presidentID = getCookieValue('presidentID')
    let previousPresidentID = getCookieValue('previousPresidentID')
    let previousChancellorID = getCookieValue('previousChancellorID')
    let executedPlayers = generateExecutedPlayersList()
    let listOfPlayers = generatePlayersList()


    $('#chancellorSelectionAccordion').addClass('d-none')
    $('#selectChancellor').prop("disabled",true)
    thisPlayerID = getCookieValue('playerID')

    if (amIPresident()){
      console.log('you are president... please select a chancellor')
      $('#presidentModal').modal('show')
      $('#chancellorSelectionAccordion').removeClass('d-none')
      $('#selectChancellor').prop("disabled",false)
    }

    //identify current president and display badge
    showCurrentOffice()
    showPreviousOffice()
    disableVoting()
    updateGameBoards()
    clearVotingNotifications()

    // Strike through executed players
    // Players will be completely ommited if page is refreshed
    console.log(executedPlayers)
    executedPlayers.forEach(function(item,index){
      executedPlayerSelector = "#player" + item.playerID + "_text"
      $(executedPlayerSelector).html(function(index,currentcontent){
        return "<s>" + currentcontent + "</s>"
      })

      if (getCookieValue('playerID') == item.playerID){
        $('#votingContainer').addClass('d-none') //remove voting option
      }
    });

    // Add existing players as options in Chancellor Selection
    let selectorHTML = "<option value=\"\"></option>"
    let numberOfPlayers = getCookieValue('numberOfPlayers')
    listOfPlayers.forEach(function(item,index){
      if (item.playerID != presidentID && item.playerID != previousChancellorID && (item.playerID != previousPresidentID || numberOfPlayers == 5) ){
        selectorHTML += "<option value=\"" + item.playerID + "\">" + item.playerName + "</option>"
      }
      
    })
    $('#selectChancellor').html(selectorHTML)

  }

  function clearVotingNotifications(){

    let listOfPlayers = generatePlayersList()
    listOfPlayers.forEach(function(item,index){
      let playerVotedSelector = '#player'+item.playerID+'_text'
      $(playerVotedSelector).css('border-left', '0px')
    })
    let thisPlayerID = getCookieValue('playerID')
    let playerVotedSelector = '#player'+thisPlayerID+'_text'
    $(playerVotedSelector).css('border-left', '0px')

  }


  function chancellor_locked_in(){
    showCurrentOffice()
    showPreviousOffice()

    if(amIAlive()){
      $('#voteYes').prop('disabled', false)
      $('#voteNo').prop('disabled', false)
    } 

  }



  function president_discard_event(){
    let policiesInHand = getCookieValue('policiesInHand')

    if (amIPresident() ){
      policiesInHand = policiesInHand.split('p')
      loadPolicies(policiesInHand)
    } else {
      // put in a president voting modal
    }

    clearVotingNotifications()

  }

  function chancellor_discard_event(){
    let chancellorID_policies = getCookieValue('chancellorID')
    let thisPlayerID = getCookieValue('playerID')
    let policies = getCookieValue('policiesInHand')
    let vetoPower = getCookieValue('vetoPower')

    if (thisPlayerID == chancellorID_policies && policies.split('p').length == 2) {
      if (vetoPower == 'true'){
          $('#vetoPower').removeClass('d-none')
          $('#vetoPower').prop("disabled", false)
        }
        policies = policies.split('p')
        loadPolicies(policies)
    } else if (policies.length == 2) {
      // show chancellor discarding modal?
    } else if (policies.length == 1){
      setCookieValue('policiesInHand', 'Null')
    }


  }

  function executive_action_event(){
    let executiveAction = getCookieValue('executiveAction')

    if (executiveAction != "" ) {
      // change modal body to match executive action
      $('#executiveActionModalBodyTitle').html(function(index,currentcontent){
        let leadingMessage = currentcontent.split(':')[0]
        return leadingMessage + ': <strong>' + executiveAction.replace('_', ' ') + "</strong>"
      })

      if (amIPresident()){
        disableModalBackdrop(true)

        if (executiveAction == "policy_peek"){
          $('#executiveActionModalSNSBody').addClass('d-none')
          $('#investigateOrExecutionSubmit').addClass('d-none')
          $('#executiveActionSubmit').removeClass('d-none')
          $('#investigateOrExecutionSubmit').prop("disabled",true)

        } else {
          let listOfPlayers = generatePlayersList()
          $('#selectPlayer').html(function(index,currentcontent){
            return generatePlayersOptions(listOfPlayers)
          });

          $('#executiveActionSubmit').addClass('d-none')
          $('#executiveActionModalSNSBody').removeClass('d-none')
          $('#investigateOrExecutionSubmit').addClass('d-none')
          $('#specialElectionSubmit').addClass('d-none')

          if (executiveAction == "special_election"){
            $('#specialElectionSubmit').prop("disabled",false)
          } else {
            // investigate or execute
            $('#investigateOrExecutionSubmit').prop("disabled",false)
            if (executiveAction == "investigate_loyalty"){
              $('#investigateOrExecutionSubmit').html('Investigate')
            } else if (executiveAction == "execution") {
              $('#investigateOrExecutionSubmit').html('Execute')
            }
          }
        }
      } else {
        disableModalBackdrop(false)
        $('#executiveActionSubmit').removeClass('d-none')
        $('#executiveActionModalSNSBody').addClass('d-none')
        $('#investigateOrExecutionSubmit').prop("disabled",true)
        $('#investigateOrExecutionSubmit').addClass('d-none')
      }

      $('#executiveActionModal').modal('show')
    }


  }



  function loadPolicies(list_of_policies){
    //show policies
    $('#policiesModal').modal('show')

    fetch('new_policies_event',
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(list_of_policies)

    }).then(res => {return res.text()} )
      .then(jsonRes => {
        // append new player card html to existing div
       $("#policies").html(function(index,currentcontent){
          return jsonRes
       })
       policyRadioListeners();
      })

    fetch('new_policies_radio_event',
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(list_of_policies)

    }).then(res => {return res.text()} )
      .then(jsonRes => {
        // append new player card html to existing div
       $("#policiesRadio").html(function(index,currentcontent){
          return jsonRes
       })
      })
    $('#policyAccordion').removeClass('d-none')

  }


  function policyRadioListeners(){
    $('#policy_1').click(function() {
      $('#radio_1').prop('checked',true)
    })
    $('#policy_2').click(function() {
      $('#radio_2').prop('checked',true)
    })
    $('#policy_3').click(function() {
      $('#radio_3').prop('checked',true)
    })
  }


	function WebSocketEstablish() {

    console.log("Socket IP: " + WS_IP_ADDRESS)

    console.log('trying to connect via socket io..')
    const socket = io(WS_IP_ADDRESS);


    socket.on('connect', function(){
      console.log('successfully connected')
    });

    socket.on('message', function(message){
      let thisGameID = getCookieValue('gameID')
      if (message.message.gameID == thisGameID)
      peerParseEvent(message)
    })

    socket.on('sns', function(data){
      let thisGameID = getCookieValue('gameID')
      let messageGameID = data.message.gameID
      if (messageGameID == thisGameID){
        $('#fakeLoad').modal('show')
        snsParseEvent(data)

        reloadGameState()

        
        // call function to set up state of next turn
        

      }
    })

    socket.on('new_player', function(message){
      $('#fakeLoad').modal('show')
      let thisGameID = getCookieValue('gameID')
      if (message.gameID == thisGameID){

          playerID = message.playerID
          playerName = message.playerName

          thisPlayerID = getCookieValue('playerID')
          if (playerID != thisPlayerID){ // only append if it's not the current playerID to prevent double appending
            // get html template for player cards and add it to the player accordion
            fetch('new_player_event',
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(message)

            }).then(res => {return res.text()} )
              .then(jsonRes => {
                // append new player card html to existing div
               $("#snsAddPlayerHere").html(function(index,currentcontent){
                  return currentcontent + jsonRes
               })

               // code to handle showing facists & hitler... need to test
               let role = getCookieValue('role')
               let number_of_players = getCookieValue('numberOfPlayers')
               if (role== 'Facist' || (role=='Hitler' && number_of_players < 7)){
                let hitlerID = getCookieValue('hpid')
                let facistIDs = getFacistIDs()
                facistIDs.forEach(function(item,index){
                  if (item.toString() == playerID.toString()){
                    let facistSelector = '#facist_' + playerID
                    $(facistSelector).removeClass('d-none')
                  }
                })

                if (hitlerID.toString() == playerID.toString()){
                  let hitlerSelector = '#hitler_' + playerID
                  $(hitlerSelector).removeClass('d-none')
                }
               }
              })

            // also add this player as a cookie
            setCookieValue(playerID,playerName)
          }

      }
    })

    socket.on('disconnect', function(reason){
      console.log('A user disconnected')
      if (reason === 'io server disconnect') {
      // the disconnection was initiated by the server, you need to reconnect manually
      socket.connect();
      }
      // else the socket will automatically try to reconnect
    })

  };

  // {subject: switch_value, message:json_data}
  function peerParseEvent(peerEvent){
      let subject = peerEvent.subject
      let data = peerEvent.message


      switch (subject){

        case 'select_chancellor':
          $('#fakeLoad').modal('show')
          let chancellorID = data.chancellorID


          // display who has been selected for election
          // President display handled in next_turn SNS
          let selectedChancellorSelector = '#chancellorElect_' + chancellorID
          // hide all then show
          $('.chancellorElect').addClass('d-none')
          $(selectedChancellorSelector).removeClass('d-none')

          break;

        case 'locked_in':
          // enable voting button
          $('#fakeLoad').modal('show')
          console.log('within locked_in function')

          setCookieValue('chancellorID', data.chancellorID)
          chancellor_locked_in()

          break;

        case 'voted':
          let playerVotedID = data.playerID
          let playerVotedSelector = '#player'+playerVotedID+'_text'
          $(playerVotedSelector).css('border-left', '15px solid #5aba97')
          break;

        case 'chancellor_policies':
          let chancellorID_policies = data.chancellorID
          let thisPlayerID = getCookieValue('playerID')
          let policies = data.policies
          let vetoPower = getCookieValue('vetoPower')

          if (thisPlayerID == chancellorID_policies){
            setCookieValue('policiesInHand', policies.trim().replace(' ','p'))
          } else {
            setCookieValue('policiesInHand', policies.trim().split(' ').length)
          }

          reloadGameState()

          break;

        case 'chancellorEnactVetoPower':
          if (amIPresident()){
            $('#vetoModalPresident').modal({backdrop: 'static', keyboard: false})
          }

          break;
        case 'presidentDenyVetoPower':
          let chancellorID_veto = getCookieValue('chancellorID')
          let thisPlayerID_veto = getCookieValue('playerID')

          if (chancellorID_veto == thisPlayerID_veto){
            $('#vetoModalChancellor').modal('show')
          }

          break;
        case 'presidentApproveVetoPower':
          // Clear out policies HTML & hide accordion
          $("#policies").html('<div></div>')
          $("#policiesRadio").html('<div></div>')
          $('#policyAccordion').addClass('d-none')
          $('#vetoPower').addClass('d-none')

          break;





      }

      //after switch
    }



    function snsParseEvent(snsEvent){
      var subject = snsEvent.subject
      var message = snsEvent.message

      switch (subject) {

        case 'next_turn':
          setCookieValue('presidentID', message.presidentID)
          setCookieValue('previousPresidentID', message.previousPresidentID)
          setCookieValue('previousChancellorID', message.previousChancellorID)
          setCookieValue('electionTracker', message.electionTracker)
          setCookieValue('numberOfFacistPoliciesEnacted', message.numberOfFacistPoliciesEnacted)
          setCookieValue('numberOfLiberalPoliciesEnacted', message.numberOfLiberalPoliciesEnacted)
          setCookieValue('specialElectionPresidentPlaceholder', message.specialElectionPresidentPlaceholder)
          setCookieValue('chancellorID', message.chancellorID)
          setCookieValue('vetoPower', message.vetoPower)
          setCookieValue('executiveActionResult', message.executiveActionResult)
          setCookieValue('executiveAction', message.executiveAction)

          for (var i=1; i <= getCookieValue('numberOfPlayers'); i++){
            deleteCookieValue(i)
          }
          message.listOfPlayers.forEach(function(item,index){
            setCookieValue(item.playerID, item.playerName)
          })

          message.executedPlayers.forEach(function(item,index){
            deleteCookieValue(item.playerID)
            setCookieValue('ghost'+item.playerID, item.playerName)

          })

          break;

        case 'voting_sns':
          console.log("in voting sns switch")
          if (amIPresident()){
            policiesInHand = message.policiesInHand.toString().replace(/,/g,'p')
          } else {
            policiesInHand = message.policiesInHand.length
          }
          setCookieValue('policiesInHand', policiesInHand)
          setCookieValue('vetoPower', message.vetoPower)

          // president_discard_event(message.policiesInHand)

          break;

        case 'policy_enactment':
          setCookieValue('numberOfFacistPoliciesEnacted', message.numberOfFacistPoliciesEnacted)
          setCookieValue('numberOfLiberalPoliciesEnacted', message.numberOfLiberalPoliciesEnacted)
          setCookieValue('executiveAction', message.executiveAction)

          updateGameBoards()


          break;

        case 'end_game':
          console.log('game ended: ' + message.end_game_status)
          setCookieValue('endGameStatus', message.end_game_status)
          window.location.href = "end_game"
          break;



        

      }
      
      


    }


    $(document).ready( function() {
      $('.previousPresident').tooltip()
      $('.previousChancellor').tooltip()
      $('.presidentElect').tooltip()
      $('.chancellorElect').tooltip()
      $('.hitler').tooltip()
      $('.facist').tooltip()

      $('#fakeLoad').on('show.bs.modal', function(e){
        setTimeout(function() {
          $('#fakeLoad').modal('hide')
        }, 1000)
      })

      // Chancellor Selection


      // Voting Listeners
      $('#voteYes').click(function(){
        peerMessage = {
          "origin" : 'peer',
          "subject" : 'voted',
          "message" : {
            "gameID" : getCookieValue('gameID'),
            "playerID": getCookieValue('playerID') 
          }
        }

        sendWSMessage(peerMessage)
        let data = { 
          "game_id" : getCookieValue('gameID'),
          "player_id" : getCookieValue('playerID'),
          "vote" : true,
          "president_id" : getCookieValue('presidentID'),
          "chancellor_id" : getCookieValue('chancellorID')
        }
        $('#fakeLoad').modal('show')
        fetch('voting',
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)

            }).then(res => {return res.text()} )
              .then(jsonRes => {
               console.log(jsonRes)
              })
      });
      $('#voteNo').click(function(){
        peerMessage = {
          "origin" : 'peer',
          "subject" : 'voted',
          "message" : {
            "gameID" : getCookieValue('gameID'),
            "playerID": getCookieValue('playerID') 
          }
        }
        sendWSMessage(peerMessage)
        let data = { 
          "game_id" : getCookieValue('gameID'),
          "player_id" : getCookieValue('playerID'),
          "vote" : false,
          "president_id" : getCookieValue('presidentID'),
          "chancellor_id" : getCookieValue('chancellorID')
        }
        $('#fakeLoad').modal('show')
        fetch('voting',
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)

            }).then(res => {return res.text()} )
              .then(jsonRes => {
               console.log(jsonRes)
              })
      })



      // Chancellor Select Listeners
      $('#selectChancellor').change(function (){

        if ($('#selectChancellor').val() == ""){
          $('#selectChancellorLock').addClass('d-none')
        } else {
          $('#selectChancellorLock').removeClass("d-none")
        }

        let chancellorID = $('#selectChancellor').val()
        console.log('submit chancellorID: ' + chancellorID)

        let playerMessage = {
          "gameID" : getCookieValue('gameID'),
          "presidentID" : getCookieValue('playerID'),
          "chancellorID" : chancellorID
        }

        let wsPayload = {
          "origin": "peer",
          "subject": "select_chancellor",
          "message": playerMessage
        }

        sendWSMessage(wsPayload)

      });

      $('#selectChancellorLock').click(function(){
        let chancellorID = $('#selectChancellor').val()

        let wsPayload = {
          "origin": "peer",
          "subject": "locked_in",
          "message": {"gameID" : getCookieValue('gameID'), "chancellorID" : chancellorID}
        }

        sendWSMessage(wsPayload)

        // Enable voting
        // $('#voteYes').prop("disabled",false)
        // $('#voteNo').prop("disabled",false)

        // Disable nomination
        $('#selectChancellor').prop("disabled",true)
        $('#selectChancellorLock').addClass('d-none')

        setCookieValue('chancellorID' , chancellorID)

        let data = { 
          "game_id" : getCookieValue('gameID'),
          "chancellor_id" : $('#selectChancellor').val()
        }
        fetch('chancellor_locked_in',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)

        }).then(res => {return res.text()} )
          .then(jsonRes => {
           console.log(jsonRes)
          })


      })


      // Policy Discard

      // First click of discard button to show modal
      $('#policySubmit').click(function(){
        let value = $('input[name=policyRadio]:checked').val()
        // console.log(value)
        let imageSRC = ""
        if (value == 'F'){
          imageSRC = '/images/facist_policy_rounded.png'
        } else {
          imageSRC = '/images/liberal_policy_rounded.png'
        }
        let policyHTML = '<img src=\"' + imageSRC + '\">'
        $('#policyDiscardModalCard').html(policyHTML)
        $('#policyDiscardModal').modal('show')
      });

      // Second click of okay to actually discard
      $('#policyDiscardSubmit').click(function() {
        let value = $('input[name=policyRadio]:checked').val()
        let remainingPolicies = ""
        $('input[name=policyRadio]:not(:checked)').each(function(){
          remainingPolicies += $(this).val() + ' '
        })
        // console.log("this is being discarded: " + value)
        // console.log("pass these to the chancellor: " + remainingPolicies)

        // send message to everyone to update policy in hand value
        peerMessage = {
          "origin" : 'peer',
          "subject" : 'chancellor_policies',
          "message" : {
            "gameID" : getCookieValue('gameID'),
            "chancellorID": getCookieValue('chancellorID'),
            "policies" : remainingPolicies
          }
        }
        sendWSMessage(peerMessage)

        reaminingParsedPolicies = remainingPolicies.trim().split(' ')

        if (reaminingParsedPolicies.length == 2) {
          let data = { 
            "game_id" : getCookieValue('gameID'),
            "discard" : value,
            "policies_in_hand" : reaminingParsedPolicies
          }
          fetch('president_policy_discard',
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)

          }).then(res => {return res.text()} )
            .then(jsonRes => {
             console.log(jsonRes)
            })
        } else if (reaminingParsedPolicies.length == 1) {
          let data = { 
            "game_id" : getCookieValue('gameID'),
            "discard" : value,
            "enact" : reaminingParsedPolicies[0]
          }
          fetch('policy_enactment',
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)

          }).then(res => {return res.text()} )
            .then(jsonRes => {
             console.log(jsonRes)
            })

        }
      });


      // Executive Action
      $('#executiveActionSubmit').click(function() {
        let executiveActionData = {}
        executiveActionData["game_id"] = getCookieValue("gameID")
        executiveActionData["executive_action"] = getCookieValue("executiveAction")

        if (amIPresident()) {
          executiveAction(executiveActionData)
        }

      });

      $('#selectPlayer').change(function() {
        if ($('#selectPlayer').val() == ""){
          if (getCookieValue('executiveAction') == 'special_election'){
             $('#specialElectionSubmit').addClass('d-none')
          } else {
            $('#investigateOrExecutionSubmit').addClass('d-none')
          }
        } else {
          if (getCookieValue('executiveAction') == 'special_election'){
             $('#specialElectionSubmit').removeClass("d-none")
          } else {
            $('#investigateOrExecutionSubmit').removeClass("d-none")
          }
        }
      });

      $('#investigateOrExecutionSubmit').click(function() {
        // console.log($('#selectPlayer').val())
        //{executive_action: string, game_id: string}
        let executiveActionData = {
          "executive_action" : getCookieValue('executiveAction'),
          "game_id" : getCookieValue('gameID'),
          "player_id" : $('#selectPlayer').val()
        }
        $('#executiveActionModal').modal('hide')
        $('#fakeLoad').modal('show')
        executiveAction(executiveActionData)
      

      });

      $('#specialElectionSubmit').click(function() {
        // console.log($('#selectPlayer').val())
        //{executive_action: string, game_id: string}
        let data = {"game_id" : getCookieValue('gameID'), "president_id" : $('#selectPlayer').val().toString()}
        console.log(data)
        fetch('next_turn',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)

        }).then(res => {return res.text()} )
          .then(jsonRes => {
           console.log(jsonRes)
           setCookieValue('executiveAction', 'Null')

        })
        $("#selectPlayer option:selected").prop("selected", false)
        $('#executiveActionModal').modal('hide')
        $('#fakeLoad').modal('show')

      });

      $('#executiveActionResultSubmit').click(function() {
        let data = {"game_id" : getCookieValue('gameID')}
        fetch('next_turn',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)

        }).then(res => {return res.text()} )
          .then(jsonRes => {
           console.log(jsonRes)
          })
      });

      $('#vetoPower').click(function() {
        let peerMessage = {
          "origin" : 'peer',
          "subject" : 'chancellorEnactVetoPower',
          "message" : {
            "gameID" : getCookieValue('gameID')
          }
        }

        sendWSMessage(peerMessage)
      });

      $('#vetoApprove').click(function(){
        let data = { 
          "game_id" : getCookieValue('gameID'),
          "discard" : "Null",
          "enact" : "Null"
        }
        fetch('policy_enactment',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)

        }).then(res => {return res.text()} )
          .then(jsonRes => {
           console.log(jsonRes)
          })
        let peerMessage = {
          "origin" : 'peer',
          "subject" : 'presidentApproveVetoPower',
          "message" : {
            "gameID" : getCookieValue('gameID')
          }
        }

        sendWSMessage(peerMessage)
      });

      $('#vetoDeny').click(function(){
        let peerMessage = {
          "origin" : 'peer',
          "subject" : 'presidentDenyVetoPower',
          "message" : {
            "gameID" : getCookieValue('gameID')
          }
        }

        sendWSMessage(peerMessage)
      });

      



      
      
      WebSocketEstablish();
      reloadGameState();


    });
    


</script>
