#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('secret-hitler:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Socket IO Server
 *
 */

io.on('connection', function(socket){
  console.log('A user connected... Socket ID: ' + socket.id);

  socket.on('sns update', function(message){
    console.log("Subject/Event: " + message.subject)
    console.log("Data: " + JSON.stringify(message.message))
    if (message.subject == 'new_player'){
      socket.broadcast.emit('new_player', message.message)
    } else {
      socket.broadcast.emit('sns', message)
    }

  })

  socket.on('message', function(message){
    console.log('message sent... peer to peer communication')
    socket.broadcast.send(message)
  })


  socket.on('disconnect', function(reason){
    console.log('A user disconnected')
    if (reason === 'io server disconnect') {
    // the disconnection was initiated by the server, you need to reconnect manually
    socket.connect();
    }
    // else the socket will automatically try to reconnect
  })


});



/**
 * WebSocket Server
 *
 */
// const WebSocketServer = require('websocket').server;
// const ws_functions = require('../servers/ws-server')


// const ws = http.createServer();
// ws.listen(5000);
// const ws_server = new WebSocketServer({
//     httpServer: ws
// });
// ws_server.on('request', ws_functions);

/**
 * WebSocket Server with ws
 *
 */

// const WebSocket = require('ws');
// const wss = new WebSocket.Server({ port: 5000 });
// const ws_functions = require('../servers/ws-server')

// wss.on('connection', function connection(ws) {
//     ws.on('message', function incoming(message) {
//         console.log('received: %s', message);
//          wss.clients.forEach(function each(client) {
//           if (client !== ws && client.readyState === WebSocket.OPEN) {
//             client.send(message);
//           }
//         });

//     });
// });




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
